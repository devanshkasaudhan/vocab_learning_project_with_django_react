name: Deploy to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Test Backend
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install django djangorestframework django-cors-headers
        pip install pytest pytest-django
    
    - name: Run Django tests
      run: |
        cd ${{ github.workspace }}
        python manage.py check
        python manage.py makemigrations --check --dry-run
        python manage.py test --verbosity=2
      env:
        DJANGO_SETTINGS_MODULE: vocab_backend.settings

  # Test Frontend
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: vocab_frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd vocab_frontend
        npm ci
    
    - name: Run tests
      run: |
        cd vocab_frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build frontend
      run: |
        cd vocab_frontend
        npm run build

  # Build and Deploy to GitHub Pages
  build-and-deploy:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: vocab_frontend/package-lock.json
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install django djangorestframework django-cors-headers
    
    - name: Setup Django and create sample data
      run: |
        python manage.py migrate
        python manage.py populate_words
      env:
        DJANGO_SETTINGS_MODULE: vocab_backend.settings
    
    - name: Install frontend dependencies
      run: |
        cd vocab_frontend
        npm ci
    
    - name: Update API endpoint for GitHub Pages
      run: |
        cd vocab_frontend/src/components
        sed -i "s|http://localhost:8000/api/|https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/api/|g" WordOfTheDay.js
    
    - name: Build React app
      run: |
        cd vocab_frontend
        npm run build
      env:
        CI: false
        PUBLIC_URL: /vocab_learning_project_with_django_react
    
    - name: Create deployment directory
      run: |
        mkdir -p deployment
        cp -r vocab_frontend/build/* deployment/
        
        # Ensure manifest.json and other static files are in the correct location
        mkdir -p deployment/vocab_learning_project_with_django_react
        cp -r vocab_frontend/build/* deployment/vocab_learning_project_with_django_react/
        
        # Create a simple API mock for GitHub Pages (since we can't run Django on GitHub Pages)
        mkdir -p deployment/api
        echo '{
          "id": 1,
          "word": "Serendipity",
          "definition": "The occurrence and development of events by chance in a happy or beneficial way",
          "example": "A fortunate stroke of serendipity led her to discover the hidden talent.",
          "level": "Advanced",
          "created_at": "2025-07-21T10:30:00Z"
        }' > deployment/api/word-of-the-day.json
        
        # Create words list
        echo '[
          {
            "id": 1,
            "word": "Serendipity",
            "definition": "The occurrence and development of events by chance in a happy or beneficial way",
            "example": "A fortunate stroke of serendipity led her to discover the hidden talent.",
            "level": "Advanced",
            "created_at": "2025-07-21T10:30:00Z"
          },
          {
            "id": 2,
            "word": "Eloquent",
            "definition": "Fluent or persuasive in speaking or writing",
            "example": "The speaker delivered an eloquent speech that moved the audience to tears.",
            "level": "Intermediate",
            "created_at": "2025-07-21T10:31:00Z"
          }
        ]' > deployment/api/words.json
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./deployment
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Optional: Deploy backend to a cloud service (Railway, Heroku, etc.)
  deploy-backend:
    needs: [test-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install django djangorestframework django-cors-headers gunicorn
    
    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput
      env:
        DJANGO_SETTINGS_MODULE: vocab_backend.settings
    
    # Uncomment and configure for your preferred deployment service:
    
    # For Railway.app:
    # - name: Deploy to Railway
    #   uses: railwayapp/railway-deploy-action@v1.1.0
    #   with:
    #     service: 'your-service-name'
    #     railway_token: ${{ secrets.RAILWAY_TOKEN }}
    
    # For Heroku:
    # - name: Deploy to Heroku
    #   uses: akhileshns/heroku-deploy@v3.12.12
    #   with:
    #     heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
    #     heroku_app_name: "your-app-name"
    #     heroku_email: "your-email@example.com"
    
    - name: Backend deployment placeholder
      run: |
        echo "Backend ready for deployment"
        echo "Configure your preferred cloud service in this step"
